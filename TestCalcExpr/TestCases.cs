using CalcExpr.Context;
using CalcExpr.Expressions;

namespace TestCalcExpr;

public class TestCases
{
    public readonly static (string, IExpression, IExpression)[] Expressions =
    {
        (" .1", new Number(0.1), new Number(0.1)),
        (" 0.1", new Number(0.1), new Number(0.1)),
        (" 1.", new Number(1), new Number(1)),
        (" 1", new Number(1), new Number(1)),
        (" +1", new UnaryOperator("+", true, new Number(1)), new Number(1)),
        (" -1", new UnaryOperator("-", true, new Number(1)), new Number(-1)),
        (" !1", new UnaryOperator("!", true, new Number(1)), new Number(0)),
        (" ~2", new UnaryOperator("~", true, new Number(2)), new Number(0)),
        (" ¬0", new UnaryOperator("¬", true, new Number(0)), new Number(1)),
        (" 5!", new UnaryOperator("!", false, new Number(5)), new Number(120)),
        (" 5#", new UnaryOperator("#", false, new Number(5)), new Number(2310)),
        (" 5!! ", new UnaryOperator("!!", false, new Number(5)), new Number(15)),
        (" 1%", new UnaryOperator("%", false, new Number(1)), new Number(0.01)),
        ("~!1 ", new UnaryOperator("~", true, new UnaryOperator("!", true, new Number(1))), new Number(1)),
        ("2!% ", new UnaryOperator("%", false, new UnaryOperator("!", false, new Number(2))), new Number(0.02)),
        ("-5% ", new UnaryOperator("-", true, new UnaryOperator("%", false, new Number(5))), new Number(-0.05)),
        (" 3!!!", new UnaryOperator("!", false, new UnaryOperator("!!", false, new Number(3))), new Number(6)),
        (" 1+2.0", new BinaryOperator("+", new Number(1), new Number(2)), new Number(3)),
        (" 0 + 0 * 2", new BinaryOperator("+", new Number(0), new BinaryOperator("*", new Number(0), new Number(2))),
            new Number(0)),
        (" 1.0-2", new BinaryOperator("-", new Number(1), new Number(2)), new Number(-1)),
        (" 2*3", new BinaryOperator("*", new Number(2), new Number(3)), new Number(6)),
        (" 6×7", new BinaryOperator("×", new Number(6), new Number(7)), new Number(42)),
        (" 1/2", new BinaryOperator("/", new Number(1), new Number(2)), new Number(0.5)),
        (" 2÷2", new BinaryOperator("÷", new Number(2), new Number(2)), new Number(1)),
        (" 2^3 ", new BinaryOperator("^", new Number(2), new Number(3)), new Number(8)),
        ("13%13", new BinaryOperator("%", new Number(13), new Number(13)), new Number(0)),
        ("12.6%13", new BinaryOperator("%", new Number(12.6), new Number(13)), new Number(12.6)),
        ("13.5%13", new BinaryOperator("%", new Number(13.5), new Number(13)), new Number(0.5)),
        ("-13%13", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13)), new Number(13)),
            new Number(0)),
        ("-12.6%13", new BinaryOperator("%", new UnaryOperator("-", true, new Number(12.6)), new Number(13)),
            new Number(0.4)),
        ("-13.5%13", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13.5)), new Number(13)),
            new Number(12.5)),
        ("13%12.6", new BinaryOperator("%", new Number(13), new Number(12.6)), new Number(0.4)),
        ("12.6%12.6", new BinaryOperator("%", new Number(12.6), new Number(12.6)), new Number(0)),
        ("13.5%12.6", new BinaryOperator("%", new Number(13.5), new Number(12.6)), new Number(0.9)),
        ("-13%12.6", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13)), new Number(12.6)),
            new Number(12.2)),
        ("-12.6%12.6", new BinaryOperator("%", new UnaryOperator("-", true, new Number(12.6)), new Number(12.6)),
            new Number(0)),
        ("-13.5%12.6", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13.5)), new Number(12.6)),
            new Number(11.7)),
        ("13%13.5", new BinaryOperator("%", new Number(13), new Number(13.5)), new Number(13)),
        ("12.6%13.5", new BinaryOperator("%", new Number(12.6), new Number(13.5)), new Number(12.6)),
        ("13.5%13.5", new BinaryOperator("%", new Number(13.5), new Number(13.5)), new Number(0)),
        ("-13%13.5", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13)), new Number(13.5)),
            new Number(0.5)),
        ("-12.6%13.5", new BinaryOperator("%", new UnaryOperator("-", true, new Number(12.6)), new Number(13.5)),
            new Number(0.9)),
        ("-13.5%13.5", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13.5)), new Number(13.5)),
            new Number(0)),
        ("13%(-13)", new BinaryOperator("%", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(0)),
        ("12.6%(-13)", new BinaryOperator("%", new Number(12.6),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(12.6)),
        ("-13%(-13)", new BinaryOperator("%", new UnaryOperator("-", true, new Number(13)),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(0)),
        ("-12.6%(-13)", new BinaryOperator("%", new UnaryOperator("-", true, new Number(12.6)),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(0.4)),
        ("13%(-12.6)", new BinaryOperator("%", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0.4)),
        ("12.6%(-12.6)", new BinaryOperator("%", new Number(12.6),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0)),
        ("13.5%(-12.6)", new BinaryOperator("%", new Number(13.5),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0.9)),
        ("13%(-13.5)", new BinaryOperator("%", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(13)),
        ("12.6%(-13.5)", new BinaryOperator("%", new Number(12.6),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(12.6)),
        ("13.5%(-13.5)", new BinaryOperator("%", new Number(13.5),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(0)),
        ("13%%13", new BinaryOperator("%%", new Number(13), new Number(13)), new Number(0)),
        ("12.6%%13", new BinaryOperator("%%", new Number(12.6), new Number(13)), new Number(12.6)),
        ("13.5%%13", new BinaryOperator("%%", new Number(13.5), new Number(13)), new Number(0.5)),
        ("-13%%13", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13)), new Number(13)),
            new Number(0)),
        ("-12.6%%13", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(12.6)), new Number(13)),
            new Number(-12.6)),
        ("-13.5%%13", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13.5)), new Number(13)),
            new Number(-0.5)),
        ("13%%12.6", new BinaryOperator("%%", new Number(13), new Number(12.6)), new Number(0.4)),
        ("12.6%%12.6", new BinaryOperator("%%", new Number(12.6), new Number(12.6)), new Number(0)),
        ("13.5%%12.6", new BinaryOperator("%%", new Number(13.5), new Number(12.6)), new Number(0.9)),
        ("-13%%12.6", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13)), new Number(12.6)),
            new Number(-0.4)),
        ("-12.6%%12.6", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(12.6)), new Number(12.6)),
            new Number(0)),
        ("-13.5%%12.6", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13.5)), new Number(12.6)),
            new Number(-0.9)),
        ("13%%13.5", new BinaryOperator("%%", new Number(13), new Number(13.5)), new Number(13)),
        ("12.6%%13.5", new BinaryOperator("%%", new Number(12.6), new Number(13.5)), new Number(12.6)),
        ("13.5%%13.5", new BinaryOperator("%%", new Number(13.5), new Number(13.5)), new Number(0)),
        ("-13%%13.5", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13)), new Number(13.5)),
            new Number(-13)),
        ("-12.6%%13.5", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(12.6)), new Number(13.5)),
            new Number(-12.6)),
        ("-13.5%%13.5", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13.5)), new Number(13.5)),
            new Number(0)),
        ("13%%(-13)", new BinaryOperator("%%", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(0)),
        ("12.6%%(-13)", new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(12.6)),
        ("-13%%(-13)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13)),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(0)),
        ("-12.6%%(-13)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(12.6)),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(-12.6)),
        ("13%%(-12.6)", new BinaryOperator("%%", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0.4)),
        ("12.6%%(-12.6)", new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0)),
        ("13.5%%(-12.6)", new BinaryOperator("%%", new Number(13.5),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0.9)),
        ("-13%%(-12.6)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13)),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(-0.4)),
        ("-12.6%%(-12.6)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(12.6)),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(0)),
        ("-13.5%%(-12.6)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13.5)),
                new Parentheses(new UnaryOperator("-", true, new Number(12.6)))),
            new Number(-0.9)),
        ("13%%(-13.5)", new BinaryOperator("%%", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(13)),
        ("12.6%%(-13.5)", new BinaryOperator("%%", new Number(12.6),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(12.6)),
        ("13.5%%(-13.5)", new BinaryOperator("%%", new Number(13.5),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(0)),
        ("-13%%(-13.5)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13)),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(-13)),
        ("-12.6%%(-13.5)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(12.6)),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(-12.6)),
        ("-13.5%%(-13.5)", new BinaryOperator("%%", new UnaryOperator("-", true, new Number(13.5)),
                new Parentheses(new UnaryOperator("-", true, new Number(13.5)))),
            new Number(0)),
        ("12.6//13", new BinaryOperator("//", new Number(12.6), new Number(13)), new Number(0)),
        ("13.5//13", new BinaryOperator("//", new Number(13.5), new Number(13)), new Number(1)),
        ("-13//13", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13)), new Number(13)),
            new Number(-1)),
        ("-12.6//13", new BinaryOperator("//", new UnaryOperator("-", true, new Number(12.6)), new Number(13)),
            new Number(-1)),
        ("-13.5//13", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13.5)), new Number(13)),
            new Number(-2)),
        ("13//12.6", new BinaryOperator("//", new Number(13), new Number(12.6)), new Number(1)),
        ("13.5//12.6", new BinaryOperator("//", new Number(13.5), new Number(12.6)), new Number(1)),
        ("-13//12.6", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13)), new Number(12.6)),
            new Number(-2)),
        ("-13.5//12.6", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13.5)), new Number(12.6)),
            new Number(-2)),
        ("13//13.5", new BinaryOperator("//", new Number(13), new Number(13.5)), new Number(0)),
        ("12.6//13.5", new BinaryOperator("//", new Number(12.6), new Number(13.5)), new Number(0)),
        ("-13//13.5", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13)), new Number(13.5)),
            new Number(-1)),
        ("-12.6//13.5", new BinaryOperator("//", new UnaryOperator("-", true, new Number(12.6)), new Number(13.5)),
            new Number(-1)),
        ("-13.5//13.5", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13.5)), new Number(13.5)),
            new Number(-1)),
        ("13//(-13)", new BinaryOperator("//", new Number(13),
                new Parentheses(new UnaryOperator("-", true, new Number(13)))),
            new Number(-1)),
        ("12.6//-13", new BinaryOperator("//", new Number(12.6), new UnaryOperator("-", true, new Number(13))),
            new Number(0)),
        ("-13//-13", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13)),
            new UnaryOperator("-", true, new Number(13))), new Number(1)),
        ("-12.6//-13", new BinaryOperator("//", new UnaryOperator("-", true, new Number(12.6)),
            new UnaryOperator("-", true, new Number(13))), new Number(1)),
        ("13//-12.6", new BinaryOperator("//", new Number(13), new UnaryOperator("-", true, new Number(12.6))),
            new Number(-1)),
        ("13.5//-12.6", new BinaryOperator("//", new Number(13.5), new UnaryOperator("-", true, new Number(12.6))),
            new Number(-1)),
        ("-13//-12.6", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13)),
            new UnaryOperator("-", true, new Number(12.6))), new Number(2)),
        ("-13.5//-12.6", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13.5)),
            new UnaryOperator("-", true, new Number(12.6))), new Number(2)),
        ("13//-13.5", new BinaryOperator("//", new Number(13), new UnaryOperator("-", true, new Number(13.5))),
            new Number(0)),
        ("12.6//-13.5", new BinaryOperator("//", new Number(12.6), new UnaryOperator("-", true, new Number(13.5))),
            new Number(0)),
        ("-13//-13.5", new BinaryOperator("//", new UnaryOperator("-", true, new Number(13)),
            new UnaryOperator("-", true, new Number(13.5))), new Number(1)),
        ("-12.6//-13.5", new BinaryOperator("//", new UnaryOperator("-", true, new Number(12.6)),
            new UnaryOperator("-", true, new Number(13.5))), new Number(1)),
        (" 1&&2", new BinaryOperator("&&", new Number(1), new Number(2)), new Number(1)),
        (" 1&&0", new BinaryOperator("&&", new Number(1), new Number(0)), new Number(0)),
        (" 0∧1", new BinaryOperator("∧", new Number(0), new Number(1)), new Number(0)),
        (" 0∧0", new BinaryOperator("∧", new Number(0), new Number(0)), new Number(0)),
        (" 1||2", new BinaryOperator("||", new Number(1), new Number(2)), new Number(1)),
        (" 0||2", new BinaryOperator("||", new Number(0), new Number(2)), new Number(1)),
        (" 1 ∨0", new BinaryOperator("∨", new Number(1), new Number(0)), new Number(1)),
        (" 0 ∨0", new BinaryOperator("∨", new Number(0), new Number(0)), new Number(0)),
        (" 1 ⊕5", new BinaryOperator("⊕", new Number(1), new Number(5)), new Number(0)),
        (" 4 ⊕0", new BinaryOperator("⊕", new Number(4), new Number(0)), new Number(1)),
        (" 0 ⊕2", new BinaryOperator("⊕", new Number(0), new Number(2)), new Number(1)),
        (" 0 ⊕0", new BinaryOperator("⊕", new Number(0), new Number(0)), new Number(0)),
        (" 1 ==2", new BinaryOperator("==", new Number(1), new Number(2)), new Number(0)),
        (" pi ==π", new BinaryOperator("==", new Constant("pi"), new Constant("π")), new Number(1)),
        (" 1 !=2", new BinaryOperator("!=", new Number(1), new Number(2)), new Number(1)),
        (" infinity ≠inf", new BinaryOperator("≠", new Constant("infinity"), new Constant("inf")), new Number(0)),
        (" 2 <>2", new BinaryOperator("<>", new Number(2), new Number(2)), new Number(0)),
        (" 1 <2", new BinaryOperator("<", new Number(1), new Number(2)), new Number(1)),
        (" 1>2", new BinaryOperator(">", new Number(1), new Number(2)), new Number(0)),
        (" 1 <=2", new BinaryOperator("<=", new Number(1), new Number(2)), new Number(1)),
        (" 1 ≤1", new BinaryOperator("≤", new Number(1), new Number(1)), new Number(1)),
        (" 1 >=2", new BinaryOperator(">=", new Number(1), new Number(2)), new Number(0)),
        (" 2 ≥2", new BinaryOperator("≥", new Number(2), new Number(2)), new Number(1)),
        (" 1+2-3*4  /5^7&&8||9⊕10==11", new BinaryOperator("||", new BinaryOperator("&&", new BinaryOperator("-",
            new BinaryOperator("+", new Number(1), new Number(2)), new BinaryOperator("/", new BinaryOperator("*",
                new Number(3), new Number(4)), new BinaryOperator("^", new Number(5), new Number(7)))), new Number(8)),
            new BinaryOperator("⊕", new Number(9), new BinaryOperator("==", new Number(10), new Number(11)))),
            new Number(1)),
        ("+1+-2.0", new BinaryOperator("+", new UnaryOperator("+", true, new Number(1)),
            new UnaryOperator("-", true, new Number(2))), new Number(-1)),
        ("1.0!-2%", new BinaryOperator("-", new UnaryOperator("!", false, new Number(1)),
            new UnaryOperator("%", false, new Number(2))), new Number(0.98)),
        ("!¬2*-  +3", new BinaryOperator("*", new UnaryOperator("!", true, new UnaryOperator("¬", true, new Number(2))),
            new UnaryOperator("-", true, new UnaryOperator("+", true, new Number(3)))),
            new Number(-3)),
        ("1%%/2!!", new BinaryOperator("/", new UnaryOperator("%", false, new UnaryOperator("%", false,
            new Number(1))), new UnaryOperator("!!", false, new Number(2))),
            new Number(0.00005)),
        ("-13!%(!12)%", new BinaryOperator("%", new UnaryOperator("-", true, new UnaryOperator("!", false,
            new Number(13))), new UnaryOperator("%", false, new Parentheses(new UnaryOperator("!", true,
                new Number(12))))),
            new Number(411680.94)),
        ("1+((2-τ)*(4 /-pi))^7&& abc_1||9⊕10==  11", new BinaryOperator("||", new BinaryOperator("&&",
            new BinaryOperator("+", new Number(1), new BinaryOperator("^", new Parentheses(new BinaryOperator("*",
                new Parentheses(new BinaryOperator("-", new Number(2), new Constant("τ"))), new Parentheses(
                    new BinaryOperator("/", new Number(4), new UnaryOperator("-", true, new Constant("pi")))))),
                new Number(7))), new Variable("abc_1")), new BinaryOperator("⊕", new Number(9),
                    new BinaryOperator("==", new Number(10), new Number(11)))), new Number(1)),
        ("∞", new Constant("∞"), new Constant("∞")),
        ("inf", new Constant("inf"), new Constant("inf")),
        ("infinity ", new Constant("infinity"), new Constant("infinity")),
        ("-∞", new UnaryOperator("-", true, new Constant("∞")), new Constant("-∞")),
        ("-inf", new UnaryOperator("-", true, new Constant("inf")), new Constant("-inf")),
        ("-infinity ", new UnaryOperator("-", true, new Constant("infinity")), new Constant("-infinity")),
        ("π", new Constant("π"), new Number(Math.PI)),
        ("pi", new Constant("pi"), new Number(Math.PI)),
        ("τ", new Constant("τ"), new Number(Math.Tau)),
        ("tau", new Constant("tau"), new Number(Math.Tau)),
        ("e", new Constant("e"), new Number(Math.E)),
        ("true", new Constant("true"), new Number(1)),
        ("false", new Constant("false"), new Number(0)),
        ("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz ",
            new Variable("AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"), new Number(2)),
        ("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω",
            new Variable("ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω"), new Number(3)),
        ("abc_123", new Variable("abc_123"), new Number(4)),
        ("αβγ_123", new Variable("αβγ_123"), new Number(5)),
        ("abcd_αβγ_xyz", new Variable("abcd_αβγ_xyz"), new Number(6)),
        ("abcd_αβγ_xyz=3", new BinaryOperator("=", new Variable("abcd_αβγ_xyz"), new Number(3)), new Number(3)),
        ("abcd_αβγ_xyz=π", new BinaryOperator("=", new Variable("abcd_αβγ_xyz"), new Constant("π")),
            new Number(Math.PI)),
        ("abcd_αβγ_xyz=inf", new BinaryOperator("=", new Variable("abcd_αβγ_xyz"), new Constant("inf")),
            new Constant("inf")),
        ("--1", new UnaryOperator("--", true, new Number(1)), new Number(0)),
        ("++1", new UnaryOperator("++", true, new Number(1)), new Number(2)),
        ("1--", new UnaryOperator("--", false, new Number(1)), new Number(1)),
        ("1++", new UnaryOperator("++", false, new Number(1)), new Number(1)),
        ("---1", new UnaryOperator("--", true, new UnaryOperator("-", true, new Number(1))), new Number(-2)),
        ("+++1", new UnaryOperator("++", true, new UnaryOperator("+", true, new Number(1))), new Number(2)),
        ("(x=3)-x", new BinaryOperator("-", new Parentheses(new BinaryOperator("=", new Variable("x"), new Number(3))),
                new Variable("x")),
            new Number(0)),
        ("p(3)", new FunctionCall("p", new IExpression[] { new Number(3) }), new Number(4)),
        ("f(3)", new FunctionCall("f", new IExpression[] { new Number(3) }), new Number(3)),
        ("g(1, 2, 3)", new FunctionCall("g", new IExpression[] { new Number(1), new Number(2), new Number(3) }),
            new Number(5)),
        ("g(abc_1, 2, 3+4*1)", new FunctionCall("g", new IExpression[] { new Variable("abc_1"), new Number(2),
            new BinaryOperator("+", new Number(3), new BinaryOperator("*", new Number(4), new Number(1))) }),
            new Number(9)),
        ("is_num(3)", new FunctionCall("is_num", new IExpression[] { new Number(3) }), new Number(1)),
        ("is_num(infinity)", new FunctionCall("is_num", new IExpression[] { new Constant("infinity") }), new Number(0)),
        ("is_num(3+4)", new FunctionCall("is_num",
            new IExpression[] { new BinaryOperator("+", new Number(3), new Number(4)) }), new Number(0)),
    };

    public readonly static Dictionary<string, IExpression> Variables = new Dictionary<string, IExpression>()
    {
        { "abc_1", new Number(1) },
        { "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", new Number(2) },
        { "ΑαΒβΓγΔδΕεΖζΗηΘθΙιΚκΛλΜμΝνΞξΟοΠπΡρΣσςΤτΥυΦφΧχΨψΩω", new Number(3) },
        { "abc_123", new Number(4) },
        { "αβγ_123", new Number(5) },
        { "abcd_αβγ_xyz", new Number(6) },
        { "p", new Function(P) },
    };

    public readonly static Dictionary<string, Function> Functions = new Dictionary<string, Function>()
    {
        { "f", new Function(F) },
        { "g", new Function(G) },
        { "is_num", new Function(IsNum) },
    };

    public static IExpression F(IExpression x)
        => x;

    public static IExpression G(IExpression m, IExpression x, IExpression b)
        => new BinaryOperator("+", new BinaryOperator("*", m, x), b).Evaluate();

    public static IExpression IsNum(IExpression x, ExpressionContext _)
        => x is Number ? Constant.TRUE : Constant.FALSE;

    public static IExpression P(IExpression x)
        => x is Number n ? new Number(n.Value + 1) : Constant.UNDEFINED;
}
